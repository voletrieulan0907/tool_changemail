name: Build and Release
on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install pyinstaller
        if (Test-Path requirements.txt) { pip install -r requirements.txt } else { echo "No requirements.txt found, skipping..." }
    
    - name: Build application (folder mode)
      run: |
        pyinstaller --onedir --windowed --name="MyApp" app.py
        # Hoặc có thể thêm icon: --icon=icon.ico
    
    - name: Create internal folder structure
      run: |
        New-Item -ItemType Directory -Force -Path "dist/MyApp/internal"
        New-Item -ItemType Directory -Force -Path "dist/MyApp/config"
        New-Item -ItemType Directory -Force -Path "dist/MyApp/data"
        # Copy files nếu tồn tại
        if (Test-Path "README.md") { Copy-Item "README.md" "dist/MyApp/" }
        if (Test-Path "config.json") { Copy-Item "config.json" "dist/MyApp/config/" }
        "App Version: ${{ github.sha }}" | Out-File -FilePath "dist/MyApp/version.txt"
      shell: powershell
    
    - name: Create ZIP package
      run: |
        cd dist
        powershell Compress-Archive -Path MyApp -DestinationPath MyApp-windows.zip
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MyApp-windows
        path: dist/MyApp-windows.zip
    
    - name: Create Release (if tag pushed)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/MyApp-windows.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## 🚀 Phiên bản mới
          
          ### Thay đổi
          - Tự động build từ commit: ${{ github.sha }}
          - Build time: ${{ github.run_number }}
          
          ### Cài đặt
          1. Tải file ZIP
          2. Giải nén
          3. Chạy MyApp.exe
          
          ### Cấu trúc thư mục
          ```
          MyApp/
          ├── MyApp.exe
          ├── internal/
          ├── config/
          ├── data/
          └── _internal/ (PyInstaller files)
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  # Job riêng để tự động tạo release khi push code (không cần tag)
  auto-release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get next version
      id: version
      run: |
        # Lấy version hiện tại từ tags
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Tăng version patch
        NEW_VERSION=$(echo $LATEST_TAG | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: MyApp-windows
        path: ./release
    
    - name: Create auto release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "Auto Release ${{ steps.version.outputs.version }}"
        files: ./release/MyApp-windows.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## 🤖 Tự động phát hành
          
          Phiên bản này được tự động tạo từ commit mới nhất trên main branch.
          
          **Commit:** ${{ github.sha }}
          **Thời gian:** ${{ github.event.head_commit.timestamp }}
          **Thông điệp:** ${{ github.event.head_commit.message }}
          
          ### 📦 Tải xuống
          - `MyApp-windows.zip` - Phiên bản Windows (folder format)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
