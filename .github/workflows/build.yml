name: Build and Auto Release

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # cần full để lấy tag cũ

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install pyinstaller
        if (Test-Path requirements.txt) { pip install -r requirements.txt } else { echo "No requirements.txt found, skipping..." }
      shell: powershell

    - name: Build application (folder mode)
      run: |
        pyinstaller --onedir --windowed --name="MyApp" app.py
      shell: powershell

    - name: Create internal folder structure
      run: |
        New-Item -ItemType Directory -Force -Path "dist/MyApp/internal"
        New-Item -ItemType Directory -Force -Path "dist/MyApp/config"
        New-Item -ItemType Directory -Force -Path "dist/MyApp/data"
        if (Test-Path "README.md") { Copy-Item "README.md" "dist/MyApp/" }
        if (Test-Path "config.json") { Copy-Item "config.json" "dist/MyApp/config/" }
        "App Version: ${{ github.sha }}" | Out-File -FilePath "dist/MyApp/version.txt"
      shell: powershell

    - name: Create ZIP package
      run: |
        cd dist
        powershell Compress-Archive -Path MyApp -DestinationPath MyApp-windows.zip
      shell: powershell

    - name: Get next version tag
      id: version
      run: |
        git fetch --tags
        $latest = git tag --sort=-v:refname | Select-Object -First 1
        if (-not $latest) { $latest = "v0.0.0" }
        $parts = $latest -replace '^v', '' -split '\.'
        $major = [int]$parts[0]
        $minor = [int]$parts[1]
        $patch = [int]$parts[2] + 1
        $next = "v$major.$minor.$patch"
        echo "Next version: $next"
        echo "version=$next" >> $env:GITHUB_OUTPUT
      shell: powershell

    - name: Create Git tag
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag ${{ steps.version.outputs.version }}
        git push origin ${{ steps.version.outputs.version }}
      shell: bash

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "Release ${{ steps.version.outputs.version }}"
        files: dist/MyApp-windows.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## 🚀 Phiên bản ${{ steps.version.outputs.version }}
          - Tự động build từ commit: ${{ github.sha }}
          - Build time: ${{ github.run_number }}
          - Commit message: ${{ github.event.head_commit.message }}
          ### 📦 Cài đặt
          1. Tải file ZIP
          2. Giải nén
          3. Chạy `MyApp.exe`
          ### 📁 Cấu trúc thư mục
          ```
          MyApp/
          ├── MyApp.exe
          ├── internal/
          ├── config/
          ├── data/
          └── ...
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
